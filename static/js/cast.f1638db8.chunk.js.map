{"version":3,"file":"static/js/cast.f1638db8.chunk.js","mappings":"oQAEaA,E,QAAaC,GAAAA,EAAH,uJ,SCMvB,EAJa,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OAAO,SAACF,EAAD,UAAaE,M,0MCHhBC,EAAU,mCACVC,EAAW,gCAEJC,EAAgB,mCAAG,WAAMC,GAAN,uFACPC,IAAAA,IAAA,UAClBH,EADkB,uCACqBD,EADrB,iBACqCG,IAF9B,cACxBE,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,sDAOhBC,EAAc,mCAAG,WAAOC,EAAOL,GAAd,uFACLC,IAAAA,IAAA,UAClBH,EADkB,gCACcD,EADd,kBAC+BQ,EAD/B,iBAC6CL,IAFxC,cACtBE,EADsB,yBAIrBA,EAASC,MAJY,2CAAH,wDAOdG,EAAe,mCAAG,WAAMC,GAAN,uFACNN,IAAAA,IAAA,UAClBH,EADkB,iBACDS,EADC,oBACkBV,IAFZ,cACvBK,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfK,EAAe,mCAAG,WAAMD,GAAN,uFACNN,IAAAA,IAAA,UAClBH,EADkB,iBACDS,EADC,4BAC0BV,IAFpB,cACvBK,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfM,EAAe,mCAAG,WAAOF,EAASP,GAAhB,uFACNC,IAAAA,IAAA,UAClBH,EADkB,iBACDS,EADC,4BAC0BV,EAD1B,iBAC0CG,IAFpC,cACvBE,EADuB,yBAItBA,EAASC,MAJa,2CAAH,yD,kLC/BfO,EAAOf,EAAAA,GAAAA,GAAH,qOAUJgB,EAAOhB,EAAAA,GAAAA,GAAH,oRAWJiB,EAAQjB,EAAAA,GAAAA,IAAH,wHAQLkB,EAAUlB,EAAAA,GAAAA,IAAH,gEAKPmB,EAAQnB,EAAAA,GAAAA,GAAH,oFAMLoB,EAAOpB,EAAAA,GAAAA,EAAH,oF,SC3BF,SAASqB,EAAT,GAA6B,IAATC,EAAQ,EAARA,KAIjC,OACE,SAACP,EAAD,UACGO,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACR,UAACX,EAAD,YACE,SAACC,EAAD,CACEW,IAAKH,EAAY,UART,kCAQS,YAAmBA,GAPxB,qDAQZI,IAAKH,KAEP,UAACR,EAAD,YACE,SAACC,EAAD,UAAQO,KACR,UAACN,EAAD,yBAAkBO,UAPXH,Q,wBCdJ,SAASM,IACtB,IAAQlB,GAAYmB,EAAAA,EAAAA,MAAZnB,QACR,GAAwBoB,EAAAA,EAAAA,UAAS,IAAjC,eAAOV,EAAP,KAAaW,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,2FACxBJ,GAAW,GADa,mBAGHtB,EAAAA,EAAAA,IAAgBD,GAHb,OAGhBJ,EAHgB,OAItByB,EAAQzB,EAAKc,MAJS,gDAMtBe,EAASD,EAAMI,SANO,yBAQtBL,GAAW,GARW,4EAAH,qDAWvBI,MACC,CAAC3B,EAASwB,KAGX,gCACGd,EAAKmB,OAAS,GACb,SAACpB,EAAD,CAAUC,KAAMA,KAEhB,SAAC,IAAD,CAAMrB,KAAK,2CAEZmC,GAASM,EAAAA,GAAAA,MAAYN,EAAMI,SAC3BN,IAAW,SAACS,EAAA,EAAD","sources":["components/Text/Text.styled.js","components/Text/Text.js","services/moviesApi.js","components/CastList/CastList.styled.js","components/CastList/CastList.js","views/Cast.js"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledText = styled.p`\r\n  margin-left: 40px;\r\n  font-size: 18px;\r\n  font-weight: 400;\r\n  font-style: italic;\r\n  line-height: 1.17;\r\n  color: #fd2620;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { StyledText } from './Text.styled';\r\n\r\nconst Text = ({ text }) => {\r\n  return <StyledText>{text}</StyledText>;\r\n};\r\n\r\nexport default Text;\r\n\r\nText.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n};\r\n","import Axios from 'axios';\r\n\r\nconst API_KEY = 'd3c00761eff125b45afbcd52d8235bc7';\r\nconst BASE_URL = 'https://api.themoviedb.org/3/';\r\n\r\nexport const trendingMovieApi = async page => {\r\n  const response = await Axios.get(\r\n    `${BASE_URL}trending/movie/week?api_key=${API_KEY}&page=${page}`,\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const searchMovieApi = async (query, page) => {\r\n  const response = await Axios.get(\r\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const movieDetailsApi = async movieId => {\r\n  const response = await Axios.get(\r\n    `${BASE_URL}movie/${movieId}?api_key=${API_KEY}`,\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const movieCreditsApi = async movieId => {\r\n  const response = await Axios.get(\r\n    `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`,\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const movieReviewsApi = async (movieId, page) => {\r\n  const response = await Axios.get(\r\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&page=${page}`,\r\n  );\r\n  return response.data;\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const List = styled.ul`\r\n  display: grid;\r\n  max-width: calc(100vw - 60px);\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  grid-gap: 18px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  border-radius: 5px;\r\n  box-shadow: 0 2px 1px #331fe4, 0 5px 4px #473cad, 0 11px 8px #160e5a,\r\n    0 20px 15px #988feb;\r\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  &:hover {\r\n    transform: scale(1.04);\r\n    cursor: zoom-in;\r\n  }\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  width: 100%;\r\n  width: 220px;\r\n  height: 260px;\r\n  object-fit: cover;\r\n  border-radius: 5px;\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  padding: 4px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Title = styled.h3`\r\n  font-size: 18px;\r\n  font-weight: 500;\r\n  color: #331fe4;\r\n`;\r\n\r\nexport const Text = styled.p`\r\n  font-size: 13px;\r\n  font-weight: 400;\r\n  color: #331fe4;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { List, Image, Item, Title, Text, Wrapper } from './CastList.styled';\r\n\r\nCastList.propTypes = {\r\n  cast: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      profile_path: PropTypes.string,\r\n      name: PropTypes.string.isRequired,\r\n      character: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n};\r\n\r\nexport default function CastList({ cast }) {\r\n  const IMAGE_URL = 'https://image.tmdb.org/t/p/w300';\r\n  const DEFAULT_IMAGE = 'https://cinemaone.net/images/movie_placeholder.png';\r\n\r\n  return (\r\n    <List>\r\n      {cast.map(({ id, profile_path, name, character }) => (\r\n        <Item key={id}>\r\n          <Image\r\n            src={profile_path ? `${IMAGE_URL}/${profile_path}` : DEFAULT_IMAGE}\r\n            alt={name}\r\n          />\r\n          <Wrapper>\r\n            <Title>{name}</Title>\r\n            <Text>Character: {character}</Text>\r\n          </Wrapper>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport { movieCreditsApi } from '../services/moviesApi';\r\nimport CastList from '../components/CastList';\r\nimport Loader from '../components/Loader';\r\nimport Text from '../components/Text';\r\n\r\nexport default function Cast() {\r\n  const { movieId } = useParams();\r\n  const [cast, setCast] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchMovieCredits = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const data = await movieCreditsApi(movieId);\r\n        setCast(data.cast);\r\n      } catch {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchMovieCredits();\r\n  }, [movieId, error]);\r\n\r\n  return (\r\n    <>\r\n      {cast.length > 0 ? (\r\n        <CastList cast={cast} />\r\n      ) : (\r\n        <Text text=\"We don't have any cast for this movie.\" />\r\n      )}\r\n      {error && toast.error(error.message)}\r\n      {loading && <Loader />}\r\n    </>\r\n  );\r\n}\r\n"],"names":["StyledText","styled","text","API_KEY","BASE_URL","trendingMovieApi","page","Axios","response","data","searchMovieApi","query","movieDetailsApi","movieId","movieCreditsApi","movieReviewsApi","List","Item","Image","Wrapper","Title","Text","CastList","cast","map","id","profile_path","name","character","src","alt","Cast","useParams","useState","setCast","loading","setLoading","error","setError","useEffect","fetchMovieCredits","message","length","toast","Loader"],"sourceRoot":""}